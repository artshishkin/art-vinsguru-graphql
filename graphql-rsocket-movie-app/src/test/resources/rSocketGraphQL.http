### Query ping through RSocket
RSOCKET graphql
Host: tcp://localhost:6565
Content-Type: application/json

{
  "query": "query{ping}"
}

### Query ping through HTTP
POST localhost:8080/graphql
Content-Type: application/json

{
  "query": "query{ping}"
}

### Query user profile - DOES NOT WORK
RSOCKET graphql
Host: tcp://localhost:6565
Content-Type: application/json

< ./query-user-profile.json

### Query user profile
RSOCKET graphql
Host: tcp://localhost:6565
Content-Type: application/json

{
  "query": "query getUserProfileCut($userId: ID!){\n    userProfile(id: $userId){\n        id\n        name\n        favoriteGenre\n    }\n}\n\nquery getUserProfileFull($userId: ID!){\n    userProfile(id: $userId){\n        id\n        name\n        favoriteGenre\n        watchList {\n            id\n            title\n            genre\n            rating\n            releaseYear\n        }\n        recommended {\n            id\n            title\n            genre\n            releaseYear\n            rating\n        }\n    }\n}\n\nquery getMovieDetailsCut($movieId: ID!){\n    movieDetails(id: $movieId){\n        id\n        rating\n        releaseYear\n        title\n        genre\n    }\n}\n\nquery getMovieDetailsFull($movieId: ID!){\n    movieDetails(id: $movieId){\n        id\n        rating\n        releaseYear\n        title\n        genre\n        reviews {\n            id\n            username\n            comment\n            rating\n        }\n    }\n}\n\nquery getMoviesByGenre($genre: Genre!){\n    moviesByGenre(genre: $genre){\n        id\n        title\n        genre\n        rating\n        releaseYear\n    }\n}\n",
  "operationName": "getUserProfileFull",
  "variables": {
    "userId": 1
  }
}

### Query movie details
RSOCKET graphql
Host: tcp://localhost:6565
Content-Type: application/json

{
  "query": "query getUserProfileCut($userId: ID!){\n    userProfile(id: $userId){\n        id\n        name\n        favoriteGenre\n    }\n}\n\nquery getUserProfileFull($userId: ID!){\n    userProfile(id: $userId){\n        id\n        name\n        favoriteGenre\n        watchList {\n            id\n            title\n            genre\n            rating\n            releaseYear\n        }\n        recommended {\n            id\n            title\n            genre\n            releaseYear\n            rating\n        }\n    }\n}\n\nquery getMovieDetailsCut($movieId: ID!){\n    movieDetails(id: $movieId){\n        id\n        rating\n        releaseYear\n        title\n        genre\n    }\n}\n\nquery getMovieDetailsFull($movieId: ID!){\n    movieDetails(id: $movieId){\n        id\n        rating\n        releaseYear\n        title\n        genre\n        reviews {\n            id\n            username\n            comment\n            rating\n        }\n    }\n}\n\nquery getMoviesByGenre($genre: Genre!){\n    moviesByGenre(genre: $genre){\n        id\n        title\n        genre\n        rating\n        releaseYear\n    }\n}\n",
  "operationName": "getMovieDetailsFull",
  "variables": {
    "movieId": 1
  }
}

### Query movies by genre
RSOCKET graphql
Host: tcp://localhost:6565
Content-Type: application/json

{
  "query": "query getUserProfileCut($userId: ID!){\n    userProfile(id: $userId){\n        id\n        name\n        favoriteGenre\n    }\n}\n\nquery getUserProfileFull($userId: ID!){\n    userProfile(id: $userId){\n        id\n        name\n        favoriteGenre\n        watchList {\n            id\n            title\n            genre\n            rating\n            releaseYear\n        }\n        recommended {\n            id\n            title\n            genre\n            releaseYear\n            rating\n        }\n    }\n}\n\nquery getMovieDetailsCut($movieId: ID!){\n    movieDetails(id: $movieId){\n        id\n        rating\n        releaseYear\n        title\n        genre\n    }\n}\n\nquery getMovieDetailsFull($movieId: ID!){\n    movieDetails(id: $movieId){\n        id\n        rating\n        releaseYear\n        title\n        genre\n        reviews {\n            id\n            username\n            comment\n            rating\n        }\n    }\n}\n\nquery getMoviesByGenre($genre: Genre!){\n    moviesByGenre(genre: $genre){\n        id\n        title\n        genre\n        rating\n        releaseYear\n    }\n}\n",
  "operationName": "getMoviesByGenre",
  "variables": {
    "genre": "ACTION"
  }
}

### Mutation - Update user profile
RSOCKET graphql
Host: tcp://localhost:6565
Content-Type: application/json

{
  "query": "mutation updateUserProfileCut( $customerInput: CustomerInput!){\n    result: setProfile(input: $customerInput){\n        id\n        name\n        favoriteGenre\n    }\n}\n\nmutation updateUserProfileFull( $customerInput: CustomerInput!){\n    result: setProfile(input: $customerInput){\n        id\n        name\n        favoriteGenre\n        watchList {\n            ...MovieSummaryFragment\n        }\n        recommended {\n            ...MovieSummaryFragment\n        }\n    }\n}\n\nfragment MovieSummaryFragment on MovieSummary{\n    id\n    title\n    genre\n    rating\n    releaseYear\n}\n\nmutation addMovieToUserWatchListSimple( $watchListInput: WatchListInput!){\n    result: addToWatchList(input: $watchListInput){\n        status\n    }\n}\n\nmutation addMovieToUserWatchListFull( $watchListInput: WatchListInput!){\n    result: addToWatchList(input: $watchListInput){\n        status\n        watchList {\n            ...MovieSummaryFragment\n        }\n    }\n}",
  "operationName": "updateUserProfileCut",
  "variables": {
    "customerInput": {
      "id": 1,
      "name": "Nazar",
      "favoriteGenre": "DRAMA"
    }
  }
}

### Mutation - Add to Watchlist
RSOCKET graphql
Host: tcp://localhost:6565
Content-Type: application/json

{
  "query": "mutation updateUserProfileCut( $customerInput: CustomerInput!){\n    result: setProfile(input: $customerInput){\n        id\n        name\n        favoriteGenre\n    }\n}\n\nmutation updateUserProfileFull( $customerInput: CustomerInput!){\n    result: setProfile(input: $customerInput){\n        id\n        name\n        favoriteGenre\n        watchList {\n            ...MovieSummaryFragment\n        }\n        recommended {\n            ...MovieSummaryFragment\n        }\n    }\n}\n\nfragment MovieSummaryFragment on MovieSummary{\n    id\n    title\n    genre\n    rating\n    releaseYear\n}\n\nmutation addMovieToUserWatchListSimple( $watchListInput: WatchListInput!){\n    result: addToWatchList(input: $watchListInput){\n        status\n    }\n}\n\nmutation addMovieToUserWatchListFull( $watchListInput: WatchListInput!){\n    result: addToWatchList(input: $watchListInput){\n        status\n        watchList {\n            ...MovieSummaryFragment\n        }\n    }\n}",
  "operationName": "addMovieToUserWatchListFull",
  "variables": {
    "watchListInput": {
      "customerId": 2,
      "movieId": 4
    }
  }
}

### Query Schema Minimal
RSOCKET graphql
Host: tcp://localhost:6565
Content-Type: application/json

{
  "query": "query{\n  __schema{\n    queryType{      \n      fields{\n        name\n      }\n    }\n    mutationType{\n      fields{\n        name\n      }\n    }\n    subscriptionType{\n      fields{\n        name\n      }\n    }\n  }\n}"
}

### Query Schema Introspection
RSOCKET graphql
Host: tcp://localhost:6565
Content-Type: application/json

{
  "query": "fragment FullType on __Type {\n    kind\n    name\n    fields(includeDeprecated: true) {\n        name        \n        args {\n            ...InputValue\n        }\n        type {\n            ...TypeRef\n        }\n        isDeprecated\n        deprecationReason\n    }\n    inputFields {\n        ...InputValue\n    }\n    interfaces {\n        ...TypeRef\n    }\n    enumValues(includeDeprecated: true) {\n        name\n        isDeprecated\n        deprecationReason\n    }\n    possibleTypes {\n        ...TypeRef\n    }\n}\nfragment InputValue on __InputValue {\n    name\n    type {\n        ...TypeRef\n    }\n    defaultValue\n}\nfragment TypeRef on __Type {\n    kind\n    name\n    ofType {\n        kind\n        name\n        ofType {\n            kind\n            name\n            ofType {\n                kind\n                name\n                ofType {\n                    kind\n                    name\n                    ofType {\n                        kind\n                        name\n                        ofType {\n                            kind\n                            name\n                            ofType {\n                                kind\n                                name\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\nquery IntrospectionQuery {\n    __schema {\n        queryType {\n            name\n        }\n        mutationType {\n            name\n        }\n        types {\n            ...FullType\n        }\n        directives {\n            name\n            locations\n            args {\n                ...InputValue\n            }\n        }\n    }\n}",
  "operationName": "IntrospectionQuery"
}





